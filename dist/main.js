(function(e,o){typeof exports=="object"&&typeof module<"u"?o(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@kinvolk/headlamp-plugin/lib/K8s/crd"),require("react-router-dom")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@kinvolk/headlamp-plugin/lib/K8s/crd","react-router-dom"],o):(e=typeof globalThis<"u"?globalThis:e||self,o(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.Crd,e.pluginLib.ReactRouter))})(this,function(e,o,a,y,_){"use strict";const P="cilium.io",h="v2",B=y.makeCustomResourceClass({apiInfo:[{group:P,version:h}],isNamespaced:!0,singularName:"CiliumNetworkPolicy",pluralName:"ciliumnetworkpolicies"}),$=y.makeCustomResourceClass({apiInfo:[{group:P,version:h}],isNamespaced:!1,singularName:"CiliumClusterwideNetworkPolicy",pluralName:"ciliumclusterwidenetworkpolicies"}),j=y.makeCustomResourceClass({apiInfo:[{group:P,version:h}],isNamespaced:!0,singularName:"CiliumEndpoint",pluralName:"ciliumendpoints"}),A=y.makeCustomResourceClass({apiInfo:[{group:P,version:h}],isNamespaced:!1,singularName:"CiliumIdentity",pluralName:"ciliumidentities"}),K=y.makeCustomResourceClass({apiInfo:[{group:P,version:h}],isNamespaced:!1,singularName:"CiliumNode",pluralName:"ciliumnodes"});function N(r){let i="unknown";if(!r)return e.jsx(a.StatusLabel,{status:i,children:"Unknown"});const t=r.toLowerCase();return t==="ready"||t==="enforcing"||t==="true"?i="success":t==="disconnected"||t==="invalid"||t==="false"||t.includes("fail")?i="error":t==="waiting-for-identity"||t==="waiting-to-regenerate"||t==="restoring"||t==="regenerating"?i="warning":(t==="disabled"||t==="non-enforcing")&&(i="info"),e.jsx(a.StatusLabel,{status:i,children:r})}function q(){var m,v,f,E,b,I,T,k;const r=_.useParams(),{name:i,namespace:t}=r,[s,l]=j.useGet(i,t);if(l)return e.jsxs("div",{children:["Error loading Endpoint: ",l.message]});if(!s)return e.jsx(a.Loader,{title:"Loading Endpoint details..."});const{status:c={},metadata:S={}}=s.jsonData||{},{identity:d={},networking:n={},policy:p={},health:u={}}=c,L=((v=(m=n==null?void 0:n.addressing)==null?void 0:m[0])==null?void 0:v.ipv4)||"-",w=((E=(f=n==null?void 0:n.addressing)==null?void 0:f[0])==null?void 0:E.ipv6)||"-";return e.jsxs(e.Fragment,{children:[e.jsx(a.MainInfoSection,{resource:s,title:`Endpoint: ${S.name}`,extraInfo:[{name:"State",value:N(c.state)},{name:"Identity ID",value:(d==null?void 0:d.id)??"-"},{name:"IPv4",value:L},{name:"IPv6",value:w},{name:"Node",value:(n==null?void 0:n.node)||"-"}]}),e.jsx(a.SectionBox,{title:"Policy Enforcement",children:e.jsx(a.NameValueTable,{rows:[{name:"Ingress",value:N((b=p==null?void 0:p.ingress)==null?void 0:b.state)},{name:"Egress",value:N((I=p==null?void 0:p.egress)==null?void 0:I.state)}]})}),e.jsx(a.SectionBox,{title:"Health",children:e.jsx(a.NameValueTable,{rows:[{name:"BPF",value:N(u==null?void 0:u.bpf)},{name:"Policy",value:N(u==null?void 0:u.policy)},{name:"Connected",value:N(String(u==null?void 0:u.connected))},{name:"Overall",value:N(u==null?void 0:u.overallHealth)}]})}),e.jsx(a.SectionBox,{title:"Networking Details",children:e.jsx(a.NameValueTable,{rows:[{name:"Node Address",value:(n==null?void 0:n.node)||"-"},...((T=n==null?void 0:n.addressing)==null?void 0:T.flatMap((M,W)=>[{name:`IPv4 [${W}]`,value:M.ipv4||"-"},{name:`IPv6 [${W}]`,value:M.ipv6||"-"}]))||[]]})}),e.jsx(a.SectionBox,{title:"Identity Labels",children:e.jsx(a.NameValueTable,{rows:((k=d==null?void 0:d.labels)==null?void 0:k.map(M=>({name:M})))||[{name:"-",value:"No labels"}]})})]})}function F(){var S,d;const r=_.useParams(),{name:i}=r,[t,s]=A.useGet(i);if(s)return e.jsxs("div",{children:["Error loading Identity: ",s.message]});if(!t)return e.jsx(a.Loader,{title:"Loading Identity details..."});const l=((S=t.jsonData)==null?void 0:S["security-labels"])||{},c=((d=t.metadata)==null?void 0:d.labels)||{};return e.jsxs(e.Fragment,{children:[e.jsx(a.MainInfoSection,{resource:t,title:`Identity: ${t.metadata.name}`}),e.jsx(a.SectionBox,{title:"Security Labels (Source of Truth)",children:e.jsx(a.NameValueTable,{rows:Object.entries(l).map(([n,p])=>({name:n,value:p})),defaultOpen:!0})}),e.jsx(a.SectionBox,{title:"Kubernetes Labels (Used for Lookup)",children:e.jsx(a.NameValueTable,{rows:Object.entries(c).map(([n,p])=>({name:n,value:p}))})})]})}function G(){var m,v,f,E,b;const r=_.useParams(),{name:i}=r,[t,s]=K.useGet(i);if(s)return e.jsxs("div",{children:["Error loading Node: ",s.message]});if(!t)return e.jsx(a.Loader,{title:"Loading Node details..."});const{spec:l={},status:c={},metadata:S={}}=t.jsonData||{},{ipam:d={},health:n={},encryption:p={}}=c,{addresses:u=[]}=l,L=((m=u.find(I=>I.type==="CiliumInternalIP"))==null?void 0:m.ip)||"-",w=((v=u.find(I=>I.type==="InternalIP"))==null?void 0:v.ip)||"-";return e.jsxs(e.Fragment,{children:[e.jsx(a.MainInfoSection,{resource:t,title:`Node: ${S.name}`,extraInfo:[{name:"Instance ID",value:l.instanceID||"-"},{name:"Cilium Internal IP",value:L},{name:"Internal IP",value:w},{name:"Boot ID",value:l.bootid||"-"}]}),e.jsx(a.SectionBox,{title:"Node Addresses",children:e.jsx(a.NameValueTable,{rows:u.map(I=>({name:I.type,value:I.ip}))})}),e.jsx(a.SectionBox,{title:"Health Endpoints",children:e.jsx(a.NameValueTable,{rows:[{name:"IPv4",value:((f=l.health)==null?void 0:f.ipv4)||"-"},{name:"IPv6",value:((E=l.health)==null?void 0:E.ipv6)||"-"}]})}),e.jsx(a.SectionBox,{title:"IPAM Status",children:e.jsx("pre",{children:JSON.stringify(d||{},null,2)})}),e.jsx(a.SectionBox,{title:"Encryption",children:e.jsx(a.NameValueTable,{rows:[{name:"Key Index",value:((b=l.encryption)==null?void 0:b.key)??"Disabled"}]})})]})}function J({resourceClass:r,titlePrefix:i}){var E,b,I,T,k;const t=_.useParams(),{name:s,namespace:l}=t,[c,S]=r.useGet(s,l);if(S)return e.jsxs("div",{children:["Error loading ",i,": ",S.message]});if(!c)return e.jsx(a.Loader,{title:`Loading ${i} details...`});const d=((E=c==null?void 0:c.metadata)==null?void 0:E.name)||s,{spec:n={},status:p={}}=c.jsonData||{},u=n.description||"-",L=n.endpointSelector,w=n.nodeSelector,m=(I=(b=n.specs)==null?void 0:b[0])==null?void 0:I.endpointSelector,v=(k=(T=n.specs)==null?void 0:T[0])==null?void 0:k.nodeSelector;let f="-";return L?f=`Endpoint Selector: ${JSON.stringify(L.matchLabels||L)}`:w?f=`Node Selector: ${JSON.stringify(w.matchLabels||w)}`:m?f=`Rule Endpoint Selector: ${JSON.stringify(m.matchLabels||m)}`:v&&(f=`Rule Node Selector: ${JSON.stringify(v.matchLabels||v)}`),e.jsxs(e.Fragment,{children:[e.jsx(a.MainInfoSection,{resource:c,title:`${i}: ${d}`,extraInfo:[{name:"Description",value:u},{name:"Selector",value:f}]}),e.jsx(a.SectionBox,{title:"Status",children:e.jsx(a.ConditionsTable,{resource:c.jsonData})}),e.jsx(a.SectionBox,{title:"Spec (Raw YAML)",children:e.jsx("pre",{children:JSON.stringify(n||{},null,2)})})]})}function C(){return e.jsx(J,{resourceClass:B,titlePrefix:"Network Policy"})}function Y(){return e.jsx(J,{resourceClass:$,titlePrefix:"Clusterwide Network Policy"})}const g="cilium",O="ciliumnetworkpolicies",H="ciliumnetworkpolicy",D="ciliumclusterwidenetworkpolicies",X="ciliumclusterwidenetworkpolicy",x="ciliumendpoints",z="ciliumendpoint",U="ciliumidentities",Q="ciliumidentity",V="ciliumnodes",Z="ciliumnode";o.registerSidebarEntry({parent:null,name:g,label:"Cilium",icon:"mdi:hexagon-multiple-outline"}),o.registerSidebarEntry({parent:g,name:O,label:"Network Policies",url:"/cilium/networkpolicies"}),o.registerSidebarEntry({parent:g,name:D,label:"Clusterwide Policies",url:"/cilium/clusterwidenetworkpolicies"}),o.registerSidebarEntry({parent:g,name:x,label:"Endpoints",url:"/cilium/endpoints"}),o.registerSidebarEntry({parent:g,name:U,label:"Identities",url:"/cilium/identities"}),o.registerSidebarEntry({parent:g,name:V,label:"Nodes",url:"/cilium/nodes"}),o.registerRoute({path:"/cilium/networkpolicies",sidebar:O,name:O,exact:!0,component:()=>e.jsx(a.ResourceListView,{title:"Cilium Network Policies",resourceClass:B,columns:["name","namespace",{id:"status",label:"Status",getter:r=>{var l;const i=Object.values(((l=r.status)==null?void 0:l.derivativePolicies)||{});if(i.length===0)return"No Status";const t=i.some(c=>c.error),s=i.every(c=>c.enforcing);return t?"Error":s?"Enforcing":"Pending"},sort:!0},"age"]})}),o.registerRoute({path:"/cilium/networkpolicies/:namespace/:name",sidebar:O,parent:g,name:H,exact:!0,component:C}),o.registerRoute({path:"/cilium/clusterwidenetworkpolicies",sidebar:D,name:D,exact:!0,component:()=>e.jsx(a.ResourceListView,{title:"Cilium Clusterwide Network Policies",resourceClass:$,columns:["name",{id:"status",label:"Status",getter:r=>{var l;const i=Object.values(((l=r.status)==null?void 0:l.derivativePolicies)||{});if(i.length===0)return"No Status";const t=i.some(c=>c.error),s=i.every(c=>c.enforcing);return t?"Error":s?"Enforcing":"Pending"},sort:!0},"age"]})}),o.registerRoute({path:"/cilium/clusterwidenetworkpolicies/:name",sidebar:D,parent:g,name:X,exact:!0,component:Y}),o.registerRoute({path:"/cilium/endpoints",sidebar:x,name:x,exact:!0,component:()=>e.jsx(a.ResourceListView,{title:"Cilium Endpoints",resourceClass:j,columns:["name","namespace",{id:"identity",label:"Identity ID",getter:r=>{var i,t;return((t=(i=r.status)==null?void 0:i.identity)==null?void 0:t.id)??"-"},sort:!0},{id:"state",label:"State",getter:r=>{var i;return((i=r.status)==null?void 0:i.state)||"Unknown"},cellProps:r=>{var i;return{children:N((i=r.status)==null?void 0:i.state)}},sort:!0},{id:"ipv4",label:"IPv4",getter:r=>{var i,t,s,l;return((l=(s=(t=(i=r.status)==null?void 0:i.networking)==null?void 0:t.addressing)==null?void 0:s[0])==null?void 0:l.ipv4)||"-"}},{id:"ipv6",label:"IPv6",getter:r=>{var i,t,s,l;return((l=(s=(t=(i=r.status)==null?void 0:i.networking)==null?void 0:t.addressing)==null?void 0:s[0])==null?void 0:l.ipv6)||"-"}},"age"]})}),o.registerRoute({path:"/cilium/endpoints/:namespace/:name",sidebar:x,parent:g,name:z,exact:!0,component:q}),o.registerRoute({path:"/cilium/identities",sidebar:U,name:U,exact:!0,component:()=>e.jsx(a.ResourceListView,{title:"Cilium Identities",resourceClass:A,columns:["name",{id:"labels",label:"Security Labels",getter:r=>{var i;return Object.entries(((i=r.jsonData)==null?void 0:i["security-labels"])||{}).map(([t,s])=>`${t}=${s}`).join(", ")}},"age"]})}),o.registerRoute({path:"/cilium/identities/:name",sidebar:U,parent:g,name:Q,exact:!0,component:F}),o.registerRoute({path:"/cilium/nodes",sidebar:V,name:V,exact:!0,component:()=>e.jsx(a.ResourceListView,{title:"Cilium Nodes",resourceClass:K,columns:["name",{id:"ciliumInternalIP",label:"Cilium Internal IP",getter:r=>{var i,t,s;return((s=(t=(i=r.spec)==null?void 0:i.addresses)==null?void 0:t.find(l=>l.type==="CiliumInternalIP"))==null?void 0:s.ip)||"-"}},{id:"internalIP",label:"Internal IP",getter:r=>{var i,t,s;return((s=(t=(i=r.spec)==null?void 0:i.addresses)==null?void 0:t.find(l=>l.type==="InternalIP"))==null?void 0:s.ip)||"-"}},"age"]})}),o.registerRoute({path:"/cilium/nodes/:name",sidebar:V,parent:g,name:Z,exact:!0,component:G}),console.log("Cilium Plugin registered.")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
