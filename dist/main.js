(function(i,r){typeof exports=="object"&&typeof module<"u"?r(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@kinvolk/headlamp-plugin/lib/K8s/crd"),require("react-router-dom")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@kinvolk/headlamp-plugin/lib/K8s/crd","react-router-dom"],r):(i=typeof globalThis<"u"?globalThis:i||self,r(i.pluginLib.ReactJSX,i.pluginLib,i.pluginLib.CommonComponents,i.pluginLib.Crd,i.pluginLib.ReactRouter))})(this,function(i,r,o,c,P){"use strict";const d="cilium.io",m="v2",N=c.makeCustomResourceClass({apiInfo:[{group:d,version:m}],isNamespaced:!0,singularName:"CiliumNetworkPolicy",pluralName:"ciliumnetworkpolicies"}),k=c.makeCustomResourceClass({apiInfo:[{group:d,version:m}],isNamespaced:!1,singularName:"CiliumClusterwideNetworkPolicy",pluralName:"ciliumclusterwidenetworkpolicies"}),L=c.makeCustomResourceClass({apiInfo:[{group:d,version:m}],isNamespaced:!0,singularName:"CiliumEndpoint",pluralName:"ciliumendpoints"}),_=c.makeCustomResourceClass({apiInfo:[{group:d,version:m}],isNamespaced:!1,singularName:"CiliumIdentity",pluralName:"ciliumidentities"}),f=c.makeCustomResourceClass({apiInfo:[{group:d,version:m}],isNamespaced:!1,singularName:"CiliumNode",pluralName:"ciliumnodes"});function p({resourceClass:n,titlePrefix:e}){var y;const t=P.useParams(),{name:s,namespace:a}=t,[u,T]=n.useGet(s,a);if(T)return i.jsxs("div",{children:["Error loading ",e,": ",T.message]});if(!u)return i.jsx(o.Loader,{title:`Loading ${e} details...`});const M=((y=u==null?void 0:u.metadata)==null?void 0:y.name)||s;return i.jsxs(i.Fragment,{children:[i.jsx(o.MainInfoSection,{resource:u,title:`${e}: ${M}`}),i.jsx(o.SectionBox,{title:"Raw YAML",children:i.jsx("pre",{children:JSON.stringify((u==null?void 0:u.jsonData)||{},null,2)})})]})}function S(){return i.jsx(p,{resourceClass:N,titlePrefix:"Network Policy"})}function b(){return i.jsx(p,{resourceClass:k,titlePrefix:"Clusterwide Network Policy"})}function O(){return i.jsx(p,{resourceClass:L,titlePrefix:"Endpoint"})}function R(){return i.jsx(p,{resourceClass:_,titlePrefix:"Identity"})}function U(){return i.jsx(p,{resourceClass:f,titlePrefix:"Node"})}const l="cilium",I="ciliumnetworkpolicies",h="ciliumnetworkpolicy",g="ciliumclusterwidenetworkpolicies",D="ciliumclusterwidenetworkpolicy",C="ciliumendpoints",x="ciliumendpoint",w="ciliumidentities",v="ciliumidentity",E="ciliumnodes",V="ciliumnode";r.registerSidebarEntry({parent:null,name:l,label:"Cilium",icon:"mdi:hexagon-multiple-outline"}),r.registerSidebarEntry({parent:l,name:I,label:"Network Policies",url:"/cilium/networkpolicies"}),r.registerSidebarEntry({parent:l,name:g,label:"Clusterwide Policies",url:"/cilium/clusterwidenetworkpolicies"}),r.registerSidebarEntry({parent:l,name:C,label:"Endpoints",url:"/cilium/endpoints"}),r.registerSidebarEntry({parent:l,name:w,label:"Identities",url:"/cilium/identities"}),r.registerSidebarEntry({parent:l,name:E,label:"Nodes",url:"/cilium/nodes"}),r.registerRoute({path:"/cilium/networkpolicies",sidebar:I,name:I,exact:!0,component:()=>i.jsx(o.ResourceListView,{title:"Cilium Network Policies",resourceClass:N,columns:["name","namespace",{id:"status",label:"Status",getter:n=>{var t,s;const e=(s=(t=n.status)==null?void 0:t.conditions)==null?void 0:s.find(a=>a.type==="Valid");return(e==null?void 0:e.status)||"Unknown"},sort:!0},"age"]})}),r.registerRoute({path:"/cilium/networkpolicies/:namespace/:name",sidebar:I,parent:l,name:h,exact:!0,component:S}),r.registerRoute({path:"/cilium/clusterwidenetworkpolicies",sidebar:g,name:g,exact:!0,component:()=>i.jsx(o.ResourceListView,{title:"Cilium Clusterwide Network Policies",resourceClass:k,columns:["name",{id:"status",label:"Status",getter:n=>{var t,s;const e=(s=(t=n.status)==null?void 0:t.conditions)==null?void 0:s.find(a=>a.type==="Valid");return(e==null?void 0:e.status)||"Unknown"},sort:!0},"age"]})}),r.registerRoute({path:"/cilium/clusterwidenetworkpolicies/:name",sidebar:g,parent:l,name:D,exact:!0,component:b}),r.registerRoute({path:"/cilium/endpoints",sidebar:C,name:C,exact:!0,component:()=>i.jsx(o.ResourceListView,{title:"Cilium Endpoints",resourceClass:L,columns:["name","namespace",{id:"identity",label:"Identity ID",getter:n=>{var e,t;return((t=(e=n.status)==null?void 0:e.identity)==null?void 0:t.id)??"-"},sort:!0},{id:"state",label:"State",getter:n=>{var e;return((e=n.status)==null?void 0:e.state)||"Unknown"},sort:!0},{id:"ipv4",label:"IPv4",getter:n=>{var e,t,s,a;return((a=(s=(t=(e=n.status)==null?void 0:e.networking)==null?void 0:t.addressing)==null?void 0:s[0])==null?void 0:a.ipv4)||"-"}},{id:"ipv6",label:"IPv6",getter:n=>{var e,t,s,a;return((a=(s=(t=(e=n.status)==null?void 0:e.networking)==null?void 0:t.addressing)==null?void 0:s[0])==null?void 0:a.ipv6)||"-"}},"age"]})}),r.registerRoute({path:"/cilium/endpoints/:namespace/:name",sidebar:C,parent:l,name:x,exact:!0,component:O}),r.registerRoute({path:"/cilium/identities",sidebar:w,name:w,exact:!0,component:()=>i.jsx(o.ResourceListView,{title:"Cilium Identities",resourceClass:_,columns:["name",{id:"labels",label:"Security Labels",getter:n=>{var e;return Object.entries(((e=n.jsonData)==null?void 0:e["security-labels"])||{}).map(([t,s])=>`${t}=${s}`).join(", ")}},"age"]})}),r.registerRoute({path:"/cilium/identities/:name",sidebar:w,parent:l,name:v,exact:!0,component:R}),r.registerRoute({path:"/cilium/nodes",sidebar:E,name:E,exact:!0,component:()=>i.jsx(o.ResourceListView,{title:"Cilium Nodes",resourceClass:f,columns:["name",{id:"ciliumInternalIP",label:"Cilium Internal IP",getter:n=>{var e,t,s;return((s=(t=(e=n.spec)==null?void 0:e.addresses)==null?void 0:t.find(a=>a.type==="CiliumInternalIP"))==null?void 0:s.ip)||"-"}},{id:"internalIP",label:"Internal IP",getter:n=>{var e,t,s;return((s=(t=(e=n.spec)==null?void 0:e.addresses)==null?void 0:t.find(a=>a.type==="InternalIP"))==null?void 0:s.ip)||"-"}},"age"]})}),r.registerRoute({path:"/cilium/nodes/:name",sidebar:E,parent:l,name:V,exact:!0,component:U}),console.log("Cilium Plugin registered.")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
