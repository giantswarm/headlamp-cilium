(function(e,u){typeof exports=="object"&&typeof module<"u"?u(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@kinvolk/headlamp-plugin/lib/K8s/crd"),require("@mui/material"),require("react-router-dom")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@kinvolk/headlamp-plugin/lib/K8s/crd","@mui/material","react-router-dom"],u):(e=typeof globalThis<"u"?globalThis:e||self,u(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.Crd,e.pluginLib.MuiMaterial,e.pluginLib.ReactRouter))})(this,function(e,u,s,P,y,w){"use strict";const L="cilium.io",T="v2",j=P.makeCustomResourceClass({apiInfo:[{group:L,version:T}],isNamespaced:!0,singularName:"CiliumNetworkPolicy",pluralName:"ciliumnetworkpolicies"}),B=P.makeCustomResourceClass({apiInfo:[{group:L,version:T}],isNamespaced:!1,singularName:"CiliumClusterwideNetworkPolicy",pluralName:"ciliumclusterwidenetworkpolicies"}),A=P.makeCustomResourceClass({apiInfo:[{group:L,version:T}],isNamespaced:!0,singularName:"CiliumEndpoint",pluralName:"ciliumendpoints"}),G=P.makeCustomResourceClass({apiInfo:[{group:L,version:T}],isNamespaced:!1,singularName:"CiliumIdentity",pluralName:"ciliumidentities"}),K=P.makeCustomResourceClass({apiInfo:[{group:L,version:T}],isNamespaced:!1,singularName:"CiliumNode",pluralName:"ciliumnodes"});function v(i){let a="unknown";if(!i)return e.jsx(s.StatusLabel,{status:a,children:"Unknown"});const t=i.toLowerCase();return t==="ready"||t==="enforcing"||t==="true"?a="success":t==="disconnected"||t==="invalid"||t==="false"||t.includes("fail")?a="error":t==="waiting-for-identity"||t==="waiting-to-regenerate"||t==="restoring"||t==="regenerating"||t==="pending"?a="warning":(t==="disabled"||t==="non-enforcing"||t==="no status")&&(a="info"),e.jsx(s.StatusLabel,{status:a,children:i})}function k(i){return i?i.matchLabels?Object.entries(i.matchLabels).map(([a,t])=>`${a}=${t}`).join(", "):i.matchExpressions?i.matchExpressions.map(a=>`${a.key} ${a.operator} ${a.values?`(${a.values.join(", ")})`:""}`).join(", "):JSON.stringify(i):"None"}function J(i){let a=i.cidr||i.cidrGroupRef||k(i.cidrGroupSelector)||"Invalid Rule";return i.except&&i.except.length>0&&(a+=` (except ${i.except.join(", ")})`),a}function Y(i){var r,n,p,g,d;const a=(r=i.ports)==null?void 0:r.map(c=>`${c.port||"*"}/${c.protocol||"ANY"}`).join(", "),t=!!((n=i.rules)!=null&&n.http||(p=i.rules)!=null&&p.kafka||(g=i.rules)!=null&&g.dns||(d=i.rules)!=null&&d.l7proto);return e.jsxs(y.Box,{sx:{display:"flex",flexDirection:"column"},children:[e.jsxs(y.Typography,{variant:"body2",component:"span",children:["Ports: ",a||"Any"]}),t&&e.jsx(y.Chip,{label:"L7 Rules Present",size:"small",sx:{mt:.5,width:"fit-content"}})]})}function z(){var E,N,b,l,f,S,C,q;const i=w.useParams(),{name:a,namespace:t}=i,[r,n]=A.useGet(a,t);if(n)return e.jsxs("div",{children:["Error loading Endpoint: ",n.message]});if(!r)return e.jsx(s.Loader,{title:"Loading Endpoint details..."});const{status:p={},metadata:g={}}=r.jsonData||{},{identity:d={},networking:c={},policy:I={},health:o={}}=p,m=((N=(E=c==null?void 0:c.addressing)==null?void 0:E[0])==null?void 0:N.ipv4)||"-",D=((l=(b=c==null?void 0:c.addressing)==null?void 0:b[0])==null?void 0:l.ipv6)||"-";return e.jsxs(e.Fragment,{children:[e.jsx(s.MainInfoSection,{resource:r,title:`Endpoint: ${g.name}`,extraInfo:[{name:"State",value:v(p.state)},{name:"Identity ID",value:(d==null?void 0:d.id)??"-"},{name:"IPv4",value:m},{name:"IPv6",value:D},{name:"Node",value:(c==null?void 0:c.node)||"-"}]}),e.jsx(s.SectionBox,{title:"Policy Enforcement",children:e.jsx(s.NameValueTable,{rows:[{name:"Ingress",value:v((f=I==null?void 0:I.ingress)==null?void 0:f.state)},{name:"Egress",value:v((S=I==null?void 0:I.egress)==null?void 0:S.state)}]})}),e.jsx(s.SectionBox,{title:"Health",children:e.jsx(s.NameValueTable,{rows:[{name:"BPF",value:v(o==null?void 0:o.bpf)},{name:"Policy",value:v(o==null?void 0:o.policy)},{name:"Connected",value:v(String(o==null?void 0:o.connected))},{name:"Overall",value:v(o==null?void 0:o.overallHealth)}]})}),e.jsx(s.SectionBox,{title:"Networking Details",children:e.jsx(s.NameValueTable,{rows:[{name:"Node Address",value:(c==null?void 0:c.node)||"-"},...((C=c==null?void 0:c.addressing)==null?void 0:C.flatMap((V,H)=>[{name:`IPv4 [${H}]`,value:V.ipv4||"-"},{name:`IPv6 [${H}]`,value:V.ipv6||"-"}]))||[]]})}),e.jsx(s.SectionBox,{title:"Identity Labels",children:e.jsx(s.NameValueTable,{rows:((q=d==null?void 0:d.labels)==null?void 0:q.map(V=>({name:V})))||[{name:"-",value:"No labels"}]})})]})}function X(){var g,d;const i=w.useParams(),{name:a}=i,[t,r]=G.useGet(a);if(r)return e.jsxs("div",{children:["Error loading Identity: ",r.message]});if(!t)return e.jsx(s.Loader,{title:"Loading Identity details..."});const n=((g=t.jsonData)==null?void 0:g["security-labels"])||{},p=((d=t.metadata)==null?void 0:d.labels)||{};return e.jsxs(e.Fragment,{children:[e.jsx(s.MainInfoSection,{resource:t,title:`Identity: ${t.metadata.name}`}),e.jsx(s.SectionBox,{title:"Security Labels (Source of Truth)",children:e.jsx(s.NameValueTable,{rows:Object.entries(n).map(([c,I])=>({name:c,value:I}))})}),e.jsx(s.SectionBox,{title:"Kubernetes Labels (Used for Lookup)",children:e.jsx(s.NameValueTable,{rows:Object.entries(p).map(([c,I])=>({name:c,value:I}))})})]})}function Q(){var E,N,b,l,f;const i=w.useParams(),{name:a}=i,[t,r]=K.useGet(a);if(r)return e.jsxs("div",{children:["Error loading Node: ",r.message]});if(!t)return e.jsx(s.Loader,{title:"Loading Node details..."});const{spec:n={},status:p={},metadata:g={}}=t.jsonData||{},{ipam:d={},health:c={},encryption:I={}}=p,{addresses:o=[]}=n,m=((E=o.find(S=>S.type==="CiliumInternalIP"))==null?void 0:E.ip)||"-",D=((N=o.find(S=>S.type==="InternalIP"))==null?void 0:N.ip)||"-";return e.jsxs(e.Fragment,{children:[e.jsx(s.MainInfoSection,{resource:t,title:`Node: ${g.name}`,extraInfo:[{name:"Instance ID",value:n.instanceID||"-"},{name:"Cilium Internal IP",value:m},{name:"Internal IP",value:D},{name:"Boot ID",value:n.bootid||"-"}]}),e.jsx(s.SectionBox,{title:"Node Addresses (Spec)",children:e.jsx(s.NameValueTable,{rows:o.map(S=>({name:S.type,value:S.ip}))})}),e.jsx(s.SectionBox,{title:"Health Endpoints (Spec)",children:e.jsx(s.NameValueTable,{rows:[{name:"IPv4",value:((b=n.health)==null?void 0:b.ipv4)||"-"},{name:"IPv6",value:((l=n.health)==null?void 0:l.ipv6)||"-"}]})}),e.jsx(s.SectionBox,{title:"IPAM Status",children:e.jsx("pre",{children:JSON.stringify(d||{},null,2)})}),e.jsx(s.SectionBox,{title:"Encryption (Spec)",children:e.jsx(s.NameValueTable,{rows:[{name:"Key Index",value:((f=n.encryption)==null?void 0:f.key)??"Disabled"}]})})]})}function _({rule:i,type:a,index:t}){var d,c;const r=[],n=[],p=a.endsWith("Deny"),g=a.startsWith("Ingress");if((i.fromEndpoints||i.toEndpoints)&&r.push({name:"Endpoints",value:k(((d=i.fromEndpoints)==null?void 0:d[0])||((c=i.toEndpoints)==null?void 0:c[0]))}),(i.fromCIDRSet||i.toCIDRSet)&&r.push({name:"CIDRSet",value:(i.fromCIDRSet||i.toCIDRSet).map(J).join(", ")}),(i.fromCIDR||i.toCIDR)&&r.push({name:"CIDR",value:(i.fromCIDR||i.toCIDR).join(", ")}),(i.fromEntities||i.toEntities)&&r.push({name:"Entities",value:(i.fromEntities||i.toEntities).join(", ")}),i.toPorts&&i.toPorts.forEach((I,o)=>{n.push({name:`Port Rule ${o+1}`,value:Y(I)})}),i.icmps){const I=i.icmps.flatMap(o=>o.fields||[]);n.push({name:"ICMPs",value:I.map(o=>`${o.type} (Family: ${o.family||"IPv4"})`).join(", ")})}return e.jsx(s.SectionBox,{title:`${a} Rule ${t+1}`,children:e.jsxs(y.Grid,{container:!0,spacing:2,children:[e.jsxs(y.Grid,{item:!0,xs:12,md:6,children:[e.jsxs(y.Typography,{variant:"subtitle2",gutterBottom:!0,children:["Peers (",g?"From":"To",")"]}),r.length>0?e.jsx(s.NameValueTable,{rows:r}):e.jsx(y.Typography,{variant:"body2",children:"Any"})]}),!p&&e.jsxs(y.Grid,{item:!0,xs:12,md:6,children:[e.jsx(y.Typography,{variant:"subtitle2",gutterBottom:!0,children:"Ports / Protocols"}),n.length>0?e.jsx(s.NameValueTable,{rows:n}):e.jsx(y.Typography,{variant:"body2",children:"Any"})]}),p&&e.jsxs(y.Grid,{item:!0,xs:12,md:6,children:[e.jsx(y.Typography,{variant:"subtitle2",gutterBottom:!0,children:"Denied Ports / ICMP"}),n.length>0?e.jsx(s.NameValueTable,{rows:n}):e.jsx(y.Typography,{variant:"body2",children:"None Specified"})]})]})},t)}function F({item:i,titlePrefix:a}){const{spec:t={},status:r={},metadata:n={}}=i.jsonData||{},p=t.description||"-",g=t.specs?t.specs[0]:t,d=t.specs||[t],c=g==null?void 0:g.endpointSelector,I=g==null?void 0:g.nodeSelector;let o="None",m="";c?(m="Endpoint Selector",o=k(c)):I&&(m="Node Selector",o=k(I));const D=d.flatMap(l=>l.ingress||[]),E=d.flatMap(l=>l.egress||[]),N=d.flatMap(l=>l.ingressDeny||[]),b=d.flatMap(l=>l.egressDeny||[]);return e.jsxs(e.Fragment,{children:[e.jsx(s.MainInfoSection,{resource:i,title:`${a}: ${n.name}`,extraInfo:[{name:"Description",value:p},...m?[{name:m,value:o}]:[]]}),e.jsxs(s.SectionBox,{title:"Status",children:[e.jsx(s.SimpleTable,{data:Object.entries((r==null?void 0:r.derivativePolicies)||{}),columns:[{header:"Node",accessor:"0"},{header:"Enforcing",getter:l=>String(l[1].enforcing)},{header:"OK",getter:l=>String(l[1].ok)},{header:"Revision",getter:l=>l[1].localPolicyRevision},{header:"Error",getter:l=>l[1].error||"-"},{header:"Last Updated",getter:l=>l[1].lastUpdated}],emptyMessage:"No derivative policy status available."}),(r==null?void 0:r.conditions)&&e.jsx(s.ConditionsTable,{resource:i.jsonData})]}),D.map((l,f)=>e.jsx(_,{rule:l,type:"Ingress",index:f},`ingress-${f}`)),E.map((l,f)=>e.jsx(_,{rule:l,type:"Egress",index:f},`egress-${f}`)),N.map((l,f)=>e.jsx(_,{rule:l,type:"IngressDeny",index:f},`ingress-deny-${f}`)),b.map((l,f)=>e.jsx(_,{rule:l,type:"EgressDeny",index:f},`egress-deny-${f}`)),e.jsx(s.SectionBox,{title:"Raw Spec",children:e.jsx("pre",{children:JSON.stringify(t||{},null,2)})})]})}function Z(){const i=w.useParams(),{name:a,namespace:t}=i,[r,n]=j.useGet(a,t);return n?e.jsxs("div",{children:["Error loading Network Policy: ",n.message]}):r?e.jsx(F,{item:r,titlePrefix:"Network Policy"}):e.jsx(s.Loader,{title:"Loading Network Policy details..."})}function R(){const i=w.useParams(),{name:a}=i,[t,r]=B.useGet(a);return r?e.jsxs("div",{children:["Error loading Clusterwide Network Policy: ",r.message]}):t?e.jsx(F,{item:t,titlePrefix:"Clusterwide Network Policy"}):e.jsx(s.Loader,{title:"Loading Clusterwide Network Policy details..."})}const h="cilium",x="ciliumnetworkpolicies",ee="ciliumnetworkpolicy",O="ciliumclusterwidenetworkpolicies",ie="ciliumclusterwidenetworkpolicy",U="ciliumendpoints",te="ciliumendpoint",M="ciliumidentities",ae="ciliumidentity",$="ciliumnodes",re="ciliumnode";u.registerSidebarEntry({parent:null,name:h,label:"Cilium",icon:"mdi:hexagon-multiple-outline"}),u.registerSidebarEntry({parent:h,name:x,label:"Network Policies",url:"/cilium/networkpolicies"}),u.registerSidebarEntry({parent:h,name:O,label:"Clusterwide Policies",url:"/cilium/clusterwidenetworkpolicies"}),u.registerSidebarEntry({parent:h,name:U,label:"Endpoints",url:"/cilium/endpoints"}),u.registerSidebarEntry({parent:h,name:M,label:"Identities",url:"/cilium/identities"}),u.registerSidebarEntry({parent:h,name:$,label:"Nodes",url:"/cilium/nodes"});function W(i){var n;const a=Object.values(((n=i.status)==null?void 0:n.derivativePolicies)||{});if(a.length===0)return v("No Status");const t=a.some(p=>p.error),r=a.every(p=>p.enforcing);return v(t?"Error":r?"Enforcing":"Pending")}u.registerRoute({path:"/cilium/networkpolicies",sidebar:x,name:x,exact:!0,component:()=>e.jsx(s.ResourceListView,{title:"Cilium Network Policies",resourceClass:j,columns:["name","namespace",{id:"status",label:"Status",getter:W,sort:!0},"age"]})}),u.registerRoute({path:"/cilium/networkpolicies/:namespace/:name",sidebar:x,parent:h,name:ee,exact:!0,component:Z}),u.registerRoute({path:"/cilium/clusterwidenetworkpolicies",sidebar:O,name:O,exact:!0,component:()=>e.jsx(s.ResourceListView,{title:"Cilium Clusterwide Network Policies",resourceClass:B,columns:["name",{id:"status",label:"Status",getter:W,sort:!0},"age"]})}),u.registerRoute({path:"/cilium/clusterwidenetworkpolicies/:name",sidebar:O,parent:h,name:ie,exact:!0,component:R}),u.registerRoute({path:"/cilium/endpoints",sidebar:U,name:U,exact:!0,component:()=>e.jsx(s.ResourceListView,{title:"Cilium Endpoints",resourceClass:A,columns:["name","namespace",{id:"identity",label:"Identity ID",getter:i=>{var a,t;return((t=(a=i.status)==null?void 0:a.identity)==null?void 0:t.id)??"-"},sort:!0},{id:"state",label:"State",getter:i=>{var a;return((a=i.status)==null?void 0:a.state)||"Unknown"},cellProps:i=>{var a;return{children:v((a=i.status)==null?void 0:a.state)}},sort:!0},{id:"ipv4",label:"IPv4",getter:i=>{var a,t,r,n;return((n=(r=(t=(a=i.status)==null?void 0:a.networking)==null?void 0:t.addressing)==null?void 0:r[0])==null?void 0:n.ipv4)||"-"}},{id:"ipv6",label:"IPv6",getter:i=>{var a,t,r,n;return((n=(r=(t=(a=i.status)==null?void 0:a.networking)==null?void 0:t.addressing)==null?void 0:r[0])==null?void 0:n.ipv6)||"-"}},"age"]})}),u.registerRoute({path:"/cilium/endpoints/:namespace/:name",sidebar:U,parent:h,name:te,exact:!0,component:z}),u.registerRoute({path:"/cilium/identities",sidebar:M,name:M,exact:!0,component:()=>e.jsx(s.ResourceListView,{title:"Cilium Identities",resourceClass:G,columns:["name",{id:"labels",label:"Security Labels",getter:i=>{var a;return Object.entries(((a=i.jsonData)==null?void 0:a["security-labels"])||{}).map(([t,r])=>`${t}=${r}`).join(", ")}},"age"]})}),u.registerRoute({path:"/cilium/identities/:name",sidebar:M,parent:h,name:ae,exact:!0,component:X}),u.registerRoute({path:"/cilium/nodes",sidebar:$,name:$,exact:!0,component:()=>e.jsx(s.ResourceListView,{title:"Cilium Nodes",resourceClass:K,columns:["name",{id:"ciliumInternalIP",label:"Cilium Internal IP",getter:i=>{var a,t,r;return((r=(t=(a=i.spec)==null?void 0:a.addresses)==null?void 0:t.find(n=>n.type==="CiliumInternalIP"))==null?void 0:r.ip)||"-"}},{id:"internalIP",label:"Internal IP",getter:i=>{var a,t,r;return((r=(t=(a=i.spec)==null?void 0:a.addresses)==null?void 0:t.find(n=>n.type==="InternalIP"))==null?void 0:r.ip)||"-"}},"age"]})}),u.registerRoute({path:"/cilium/nodes/:name",sidebar:$,parent:h,name:re,exact:!0,component:Q}),console.log("Cilium Plugin registered.")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
