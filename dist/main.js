(function(e,u){typeof exports=="object"&&typeof module<"u"?u(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@kinvolk/headlamp-plugin/lib/K8s/crd"),require("@mui/material"),require("react-router-dom")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@kinvolk/headlamp-plugin/lib/K8s/crd","@mui/material","react-router-dom"],u):(e=typeof globalThis<"u"?globalThis:e||self,u(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.Crd,e.pluginLib.MuiMaterial,e.pluginLib.ReactRouter))})(this,function(e,u,s,w,v,L){"use strict";const T="cilium.io",D="v2",B=w.makeCustomResourceClass({apiInfo:[{group:T,version:D}],isNamespaced:!0,singularName:"CiliumNetworkPolicy",pluralName:"ciliumnetworkpolicies"}),A=w.makeCustomResourceClass({apiInfo:[{group:T,version:D}],isNamespaced:!1,singularName:"CiliumClusterwideNetworkPolicy",pluralName:"ciliumclusterwidenetworkpolicies"}),G=w.makeCustomResourceClass({apiInfo:[{group:T,version:D}],isNamespaced:!0,singularName:"CiliumEndpoint",pluralName:"ciliumendpoints"}),K=w.makeCustomResourceClass({apiInfo:[{group:T,version:D}],isNamespaced:!1,singularName:"CiliumIdentity",pluralName:"ciliumidentities"}),F=w.makeCustomResourceClass({apiInfo:[{group:T,version:D}],isNamespaced:!1,singularName:"CiliumNode",pluralName:"ciliumnodes"});function h(t){let a="";if(!t)return e.jsx(s.StatusLabel,{status:"",children:"Unknown"});const i=t.toLowerCase();return i==="ready"||i==="enforcing"||i==="true"?a="success":i==="disconnected"||i==="invalid"||i==="false"||i.includes("fail")?a="error":i==="waiting-for-identity"||i==="waiting-to-regenerate"||i==="restoring"||i==="regenerating"||i==="pending"?a="warning":(i==="disabled"||i==="non-enforcing"||i==="no status")&&(a=""),e.jsx(s.StatusLabel,{status:a,children:t})}function x(t){return t?t.matchLabels?Object.entries(t.matchLabels).map(([a,i])=>`${a}=${i}`).join(", "):t.matchExpressions?t.matchExpressions.map(a=>`${a.key} ${a.operator} ${a.values?`(${a.values.join(", ")})`:""}`).join(", "):JSON.stringify(t):"None"}function Y(t){let a=t.cidr||t.cidrGroupRef||x(t.cidrGroupSelector)||"Invalid Rule";return t.except&&t.except.length>0&&(a+=` (except ${t.except.join(", ")})`),a}function z(t){var r,l,g,I,d;const a=(r=t.ports)==null?void 0:r.map(c=>`${c.port||"*"}/${c.protocol||"ANY"}`).join(", "),i=!!((l=t.rules)!=null&&l.http||(g=t.rules)!=null&&g.kafka||(I=t.rules)!=null&&I.dns||(d=t.rules)!=null&&d.l7proto);return e.jsxs(v.Box,{sx:{display:"flex",flexDirection:"column"},children:[e.jsxs(v.Typography,{variant:"body2",component:"span",children:["Ports: ",a||"Any"]}),i&&e.jsx(v.Chip,{label:"L7 Rules Present",size:"small",sx:{mt:.5,width:"fit-content"}})]})}function X(){var E,N,P,n,f,y,m,H;const t=L.useParams(),{name:a,namespace:i}=t,[r,l]=G.useGet(a,i);if(l)return e.jsxs("div",{children:["Error loading Endpoint: ",l.message]});if(!r)return e.jsx(s.Loader,{title:"Loading Endpoint details..."});const{status:g={},metadata:I={}}=r.jsonData||{},{identity:d={},networking:c={},policy:p={},health:o={}}=g,b=((N=(E=c==null?void 0:c.addressing)==null?void 0:E[0])==null?void 0:N.ipv4)||"-",k=((n=(P=c==null?void 0:c.addressing)==null?void 0:P[0])==null?void 0:n.ipv6)||"-";return e.jsxs(e.Fragment,{children:[e.jsx(s.MainInfoSection,{resource:r,title:`Endpoint: ${I.name}`,extraInfo:[{name:"State",value:h(g.state)},{name:"Identity ID",value:(d==null?void 0:d.id)??"-"},{name:"IPv4",value:b},{name:"IPv6",value:k},{name:"Node",value:(c==null?void 0:c.node)||"-"}]}),e.jsx(s.SectionBox,{title:"Policy Enforcement",children:e.jsx(s.NameValueTable,{rows:[{name:"Ingress",value:h((f=p==null?void 0:p.ingress)==null?void 0:f.state)},{name:"Egress",value:h((y=p==null?void 0:p.egress)==null?void 0:y.state)}]})}),e.jsx(s.SectionBox,{title:"Health",children:e.jsx(s.NameValueTable,{rows:[{name:"BPF",value:h(o==null?void 0:o.bpf)},{name:"Policy",value:h(o==null?void 0:o.policy)},{name:"Connected",value:h(String(o==null?void 0:o.connected))},{name:"Overall",value:h(o==null?void 0:o.overallHealth)}]})}),e.jsx(s.SectionBox,{title:"Networking Details",children:e.jsx(s.NameValueTable,{rows:[{name:"Node Address",value:(c==null?void 0:c.node)||"-"},...((m=c==null?void 0:c.addressing)==null?void 0:m.flatMap((j,J)=>[{name:`IPv4 [${J}]`,value:j.ipv4||"-"},{name:`IPv6 [${J}]`,value:j.ipv6||"-"}]))||[]]})}),e.jsx(s.SectionBox,{title:"Identity Labels",children:e.jsx(s.NameValueTable,{rows:((H=d==null?void 0:d.labels)==null?void 0:H.map(j=>({name:j})))||[{name:"-",value:"No labels"}]})})]})}function Q(){var I,d;const t=L.useParams(),{name:a}=t,[i,r]=K.useGet(a);if(r)return e.jsxs("div",{children:["Error loading Identity: ",r.message]});if(!i)return e.jsx(s.Loader,{title:"Loading Identity details..."});const l=((I=i.jsonData)==null?void 0:I["security-labels"])||{},g=((d=i.metadata)==null?void 0:d.labels)||{};return e.jsxs(e.Fragment,{children:[e.jsx(s.MainInfoSection,{resource:i,title:`Identity: ${i.metadata.name}`}),e.jsx(s.SectionBox,{title:"Security Labels (Source of Truth)",children:e.jsx(s.NameValueTable,{rows:Object.entries(l).map(([c,p])=>({name:c,value:p}))})}),e.jsx(s.SectionBox,{title:"Kubernetes Labels (Used for Lookup)",children:e.jsx(s.NameValueTable,{rows:Object.entries(g).map(([c,p])=>({name:c,value:p}))})})]})}function Z(){var E,N,P,n,f;const t=L.useParams(),{name:a}=t,[i,r]=F.useGet(a);if(r)return e.jsxs("div",{children:["Error loading Node: ",r.message]});if(!i)return e.jsx(s.Loader,{title:"Loading Node details..."});const{spec:l={},status:g={},metadata:I={}}=i.jsonData||{},{ipam:d={},health:c={},encryption:p={}}=g,{addresses:o=[]}=l,b=((E=o.find(y=>y.type==="CiliumInternalIP"))==null?void 0:E.ip)||"-",k=((N=o.find(y=>y.type==="InternalIP"))==null?void 0:N.ip)||"-";return e.jsxs(e.Fragment,{children:[e.jsx(s.MainInfoSection,{resource:i,title:`Node: ${I.name}`,extraInfo:[{name:"Instance ID",value:l.instanceID||"-"},{name:"Cilium Internal IP",value:b},{name:"Internal IP",value:k},{name:"Boot ID",value:l.bootid||"-"}]}),e.jsx(s.SectionBox,{title:"Node Addresses (Spec)",children:e.jsx(s.NameValueTable,{rows:o.map(y=>({name:y.type,value:y.ip}))})}),e.jsx(s.SectionBox,{title:"Health Endpoints (Spec)",children:e.jsx(s.NameValueTable,{rows:[{name:"IPv4",value:((P=l.health)==null?void 0:P.ipv4)||"-"},{name:"IPv6",value:((n=l.health)==null?void 0:n.ipv6)||"-"}]})}),e.jsx(s.SectionBox,{title:"IPAM Status",children:e.jsx("pre",{children:JSON.stringify(d||{},null,2)})}),e.jsx(s.SectionBox,{title:"Encryption (Spec)",children:e.jsx(s.NameValueTable,{rows:[{name:"Key Index",value:((f=l.encryption)==null?void 0:f.key)??"Disabled"}]})}),e.jsx(s.SectionBox,{title:"Health Status",children:e.jsx(s.NameValueTable,{rows:Object.entries(c||{}).map(([y,m])=>({name:y,value:String(m)}))})}),e.jsx(s.SectionBox,{title:"Encryption Status",children:e.jsx(s.NameValueTable,{rows:Object.entries(p||{}).map(([y,m])=>({name:y,value:String(m)}))})})]})}function _({rule:t,type:a,index:i}){var d,c;const r=[],l=[],g=a.endsWith("Deny"),I=a.startsWith("Ingress");if((t.fromEndpoints||t.toEndpoints)&&r.push({name:"Endpoints",value:x(((d=t.fromEndpoints)==null?void 0:d[0])||((c=t.toEndpoints)==null?void 0:c[0]))}),(t.fromCIDRSet||t.toCIDRSet)&&r.push({name:"CIDRSet",value:(t.fromCIDRSet||t.toCIDRSet).map(Y).join(", ")}),(t.fromCIDR||t.toCIDR)&&r.push({name:"CIDR",value:(t.fromCIDR||t.toCIDR).join(", ")}),(t.fromEntities||t.toEntities)&&r.push({name:"Entities",value:(t.fromEntities||t.toEntities).join(", ")}),t.toPorts&&t.toPorts.forEach((p,o)=>{l.push({name:`Port Rule ${o+1}`,value:z(p)})}),t.icmps){const p=t.icmps.flatMap(o=>o.fields||[]);l.push({name:"ICMPs",value:p.map(o=>`${o.type} (Family: ${o.family||"IPv4"})`).join(", ")})}return e.jsx(s.SectionBox,{title:`${a} Rule ${i+1}`,children:e.jsxs(v.Grid,{container:!0,spacing:2,children:[e.jsxs(v.Grid,{item:!0,xs:12,md:6,children:[e.jsxs(v.Typography,{variant:"subtitle2",gutterBottom:!0,children:["Peers (",I?"From":"To",")"]}),r.length>0?e.jsx(s.NameValueTable,{rows:r}):e.jsx(v.Typography,{variant:"body2",children:"Any"})]}),!g&&e.jsxs(v.Grid,{item:!0,xs:12,md:6,children:[e.jsx(v.Typography,{variant:"subtitle2",gutterBottom:!0,children:"Ports / Protocols"}),l.length>0?e.jsx(s.NameValueTable,{rows:l}):e.jsx(v.Typography,{variant:"body2",children:"Any"})]}),g&&e.jsxs(v.Grid,{item:!0,xs:12,md:6,children:[e.jsx(v.Typography,{variant:"subtitle2",gutterBottom:!0,children:"Denied Ports / ICMP"}),l.length>0?e.jsx(s.NameValueTable,{rows:l}):e.jsx(v.Typography,{variant:"body2",children:"None Specified"})]})]})},i)}function W({item:t,titlePrefix:a}){const{spec:i={},status:r={},metadata:l={}}=t.jsonData||{},g=i.description||"-",I=i.specs?i.specs[0]:i,d=i.specs||[i],c=I==null?void 0:I.endpointSelector,p=I==null?void 0:I.nodeSelector;let o="None",b="";c?(b="Endpoint Selector",o=x(c)):p&&(b="Node Selector",o=x(p));const k=d.flatMap(n=>n.ingress||[]),E=d.flatMap(n=>n.egress||[]),N=d.flatMap(n=>n.ingressDeny||[]),P=d.flatMap(n=>n.egressDeny||[]);return e.jsxs(e.Fragment,{children:[e.jsx(s.MainInfoSection,{resource:t,title:`${a}: ${l.name}`,extraInfo:[{name:"Description",value:g},...b?[{name:b,value:o}]:[]]}),e.jsxs(s.SectionBox,{title:"Status",children:[e.jsx(s.SimpleTable,{data:Object.entries((r==null?void 0:r.derivativePolicies)||{}),columns:[{label:"Node",datum:"0"},{label:"Enforcing",getter:n=>String(n[1].enforcing)},{label:"OK",getter:n=>String(n[1].ok)},{label:"Revision",getter:n=>n[1].localPolicyRevision},{label:"Error",getter:n=>n[1].error||"-"},{label:"Last Updated",getter:n=>n[1].lastUpdated}],emptyMessage:"No derivative policy status available."}),(r==null?void 0:r.conditions)&&e.jsx(s.ConditionsTable,{resource:t.jsonData})]}),k.map((n,f)=>e.jsx(_,{rule:n,type:"Ingress",index:f},`ingress-${f}`)),E.map((n,f)=>e.jsx(_,{rule:n,type:"Egress",index:f},`egress-${f}`)),N.map((n,f)=>e.jsx(_,{rule:n,type:"IngressDeny",index:f},`ingress-deny-${f}`)),P.map((n,f)=>e.jsx(_,{rule:n,type:"EgressDeny",index:f},`egress-deny-${f}`)),e.jsx(s.SectionBox,{title:"Raw Spec",children:e.jsx("pre",{children:JSON.stringify(i||{},null,2)})})]})}function C(){const t=L.useParams(),{name:a,namespace:i}=t,[r,l]=B.useGet(a,i);return l?e.jsxs("div",{children:["Error loading Network Policy: ",l.message]}):r?e.jsx(W,{item:r,titlePrefix:"Network Policy"}):e.jsx(s.Loader,{title:"Loading Network Policy details..."})}function R(){const t=L.useParams(),{name:a}=t,[i,r]=A.useGet(a);return r?e.jsxs("div",{children:["Error loading Clusterwide Network Policy: ",r.message]}):i?e.jsx(W,{item:i,titlePrefix:"Clusterwide Network Policy"}):e.jsx(s.Loader,{title:"Loading Clusterwide Network Policy details..."})}const S="cilium",O="ciliumnetworkpolicies",ee="ciliumnetworkpolicy",U="ciliumclusterwidenetworkpolicies",te="ciliumclusterwidenetworkpolicy",M="ciliumendpoints",ie="ciliumendpoint",$="ciliumidentities",ae="ciliumidentity",V="ciliumnodes",re="ciliumnode";u.registerSidebarEntry({parent:null,name:S,label:"Cilium",icon:"mdi:hexagon-multiple-outline"}),u.registerSidebarEntry({parent:S,name:O,label:"Network Policies",url:"/cilium/networkpolicies"}),u.registerSidebarEntry({parent:S,name:U,label:"Clusterwide Policies",url:"/cilium/clusterwidenetworkpolicies"}),u.registerSidebarEntry({parent:S,name:M,label:"Endpoints",url:"/cilium/endpoints"}),u.registerSidebarEntry({parent:S,name:$,label:"Identities",url:"/cilium/identities"}),u.registerSidebarEntry({parent:S,name:V,label:"Nodes",url:"/cilium/nodes"});function q(t){var l;const a=Object.values(((l=t.status)==null?void 0:l.derivativePolicies)||{});if(a.length===0)return h("No Status");const i=a.some(g=>g.error),r=a.every(g=>g.enforcing);return h(i?"Error":r?"Enforcing":"Pending")}u.registerRoute({path:"/cilium/networkpolicies",sidebar:O,name:O,exact:!0,component:()=>e.jsx(s.ResourceListView,{title:"Cilium Network Policies",resourceClass:B,columns:["name","namespace",{id:"status",label:"Status",getter:q,sort:!0},"age"]})}),u.registerRoute({path:"/cilium/networkpolicies/:namespace/:name",sidebar:O,parent:S,name:ee,exact:!0,component:C}),u.registerRoute({path:"/cilium/clusterwidenetworkpolicies",sidebar:U,name:U,exact:!0,component:()=>e.jsx(s.ResourceListView,{title:"Cilium Clusterwide Network Policies",resourceClass:A,columns:["name",{id:"status",label:"Status",getter:q,sort:!0},"age"]})}),u.registerRoute({path:"/cilium/clusterwidenetworkpolicies/:name",sidebar:U,parent:S,name:te,exact:!0,component:R}),u.registerRoute({path:"/cilium/endpoints",sidebar:M,name:M,exact:!0,component:()=>e.jsx(s.ResourceListView,{title:"Cilium Endpoints",resourceClass:G,columns:["name","namespace",{id:"identity",label:"Identity ID",getter:t=>{var a,i;return((i=(a=t.status)==null?void 0:a.identity)==null?void 0:i.id)??"-"},sort:!0},{id:"state",label:"State",getter:t=>{var a;return((a=t.status)==null?void 0:a.state)||"Unknown"},cellProps:t=>{var a;return{children:h((a=t.status)==null?void 0:a.state)}},sort:!0},{id:"ipv4",label:"IPv4",getter:t=>{var a,i,r,l;return((l=(r=(i=(a=t.status)==null?void 0:a.networking)==null?void 0:i.addressing)==null?void 0:r[0])==null?void 0:l.ipv4)||"-"}},{id:"ipv6",label:"IPv6",getter:t=>{var a,i,r,l;return((l=(r=(i=(a=t.status)==null?void 0:a.networking)==null?void 0:i.addressing)==null?void 0:r[0])==null?void 0:l.ipv6)||"-"}},"age"]})}),u.registerRoute({path:"/cilium/endpoints/:namespace/:name",sidebar:M,parent:S,name:ie,exact:!0,component:X}),u.registerRoute({path:"/cilium/identities",sidebar:$,name:$,exact:!0,component:()=>e.jsx(s.ResourceListView,{title:"Cilium Identities",resourceClass:K,columns:["name",{id:"labels",label:"Security Labels",getter:t=>{var a;return Object.entries(((a=t.jsonData)==null?void 0:a["security-labels"])||{}).map(([i,r])=>`${i}=${r}`).join(", ")}},"age"]})}),u.registerRoute({path:"/cilium/identities/:name",sidebar:$,parent:S,name:ae,exact:!0,component:Q}),u.registerRoute({path:"/cilium/nodes",sidebar:V,name:V,exact:!0,component:()=>e.jsx(s.ResourceListView,{title:"Cilium Nodes",resourceClass:F,columns:["name",{id:"ciliumInternalIP",label:"Cilium Internal IP",getter:t=>{var a,i,r;return((r=(i=(a=t.spec)==null?void 0:a.addresses)==null?void 0:i.find(l=>l.type==="CiliumInternalIP"))==null?void 0:r.ip)||"-"}},{id:"internalIP",label:"Internal IP",getter:t=>{var a,i,r;return((r=(i=(a=t.spec)==null?void 0:a.addresses)==null?void 0:i.find(l=>l.type==="InternalIP"))==null?void 0:r.ip)||"-"}},"age"]})}),u.registerRoute({path:"/cilium/nodes/:name",sidebar:V,parent:S,name:re,exact:!0,component:Z}),console.log("Cilium Plugin registered.")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
